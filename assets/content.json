{
    "resume": {
        "fr": "CV",
        "ja": "履歴書",
        "en": "Resume\n\ntest"
    },
    "download": {
        "fr": "Télécharger",
        "ja": "ダウンロード",
        "en": "Download"
    },
    "download-long": {
        "fr": "Télécharger le cv en pdf",
        "ja": "履歴書をpdfでダウンロード",
        "en": "Download resume as pdf"
    },
    "settings": {
        "fr": "Paramètres",
        "ja": "設定",
        "en": "Settings"
    },
    "close": {
        "fr": "Fermer",
        "ja": "閉じる",
        "en": "Close"
    },
    "bio-long": {
        "en": "##### Biography\n\nI wrote my first program during a boring math lecture in junior high school in france, around 2005. I discovered that my TI-82 scientific calculator could be programmed using some limited variant of basic and I became obsessed with it. I learned as much as i could from the manual but quickly hit performance issues as I graduated from writing trivial math programs to attempting to build games.\n\nI used the limited internet access that my family had at the time to research ways to circumvent the issue, only to realize that all the solutions that I could find did not apply to the machine I had. In the process, I stumbled on the \"Site du Zéro\" (now OpenClassroom), the de-facto reference website for french-speaking programming self-learners, where I learned first C, then C++, as those were the only two languages with comprehensive explanations at the time.\n\nFrom then on I kept studying various programming languages and computing science. However as I reached the end of high school, I didn't see it as anything more than a hobby and iIwent on to study management in university.\n\nI moved to Japan in early 2012 as an exchange student, and lived there until mid-2014. I then dropped out of university as I realized that management wasn't my calling and went on to travel the world. From there, I spent a year in South Korea, 5 months in Taiwan and a year in australia, before going back to France in late 2017.\n\nThis was also the moment I decided I would pursue software engineering as a career, after over 13 years of self study. I worked for almost two years as a C++ and C# engineer on desktop applications at Nexter Systems, before growing sufficiently dissatisfied with the management of the IT projects to quit, in december 2019."
    },
    "bio-title": {
        "fr": "Biographie",
        "ja": "自己紹介",
        "en": "Biography"
    },
    "about-me": {
        "fr": "À propos de moi",
        "ja": "自己紹介",
        "en": "About me"
    },
    "bio-short": {
        "en": "After almost 15 years of programming as a passion, I decided a couple years ago to follow my calling and become a full-time software engineer.\n\nI focus on using my long experience and modern tools to build high-reliability, high-maintanability software. I have a particular fondness for C++, Haskell and other strongly typed languages but I have had the occasion to use a wide array of technologies and I am always happy to learn a new skill for a job."
    },
    "address-title": {
        "fr": "Adresse",
        "ja": "住所",
        "en": "Address"
    },
    "address": {
        "ja": "フランス、モンティニー＝ル＝ブルトンヌー",
        "en": "Montigny-le-Bretonneux, France"
    },
    "email": {
        "fr": "E-mail",
        "ja": "メール",
        "en": "Email"
    },
    "birthday-title": {
        "fr": "Date de naissance",
        "ja": "生年月日",
        "en": "Birthday"
    },
    "birthday": {
        "ja": "平成2年３月26日",
        "en": "26/03/1990"
    },
    "blog": {
        "ja": "ブログ",
        "en": "Blog"
    },
    "native": {
        "fr": "Langue maternelle",
        "ja": "母語",
        "en": "Native"
    },
    "french": {
        "fr": "Français",
        "ja": "フランス語",
        "en": "French"
    },
    "english": {
        "fr": "Anglais",
        "ja": "英語",
        "en": "English"
    },
    "japanese": {
        "fr": "Japonais",
        "ja": "日本語",
        "en": "Japanese"
    },
    "near-bilingual": {
        "fr": "Bilingue",
        "en": "Near Bilingual"
    },
    "fluent": {
        "fr": "Courant",
        "en": "Fluent"
    },
    "education": {
        "fr": "Éducation",
        "ja": "教育",
        "en": "Education"
    },
    "formal-education": {
        "fr": "Éducation Académique",
        "ja": "学歴",
        "en": "Formal Education"
    },
    "languages": {
        "fr": "Langues",
        "ja": "語学力",
        "en": "Languages"
    },
    "french-description": {
        "en": "I was born and raised in France, near Paris. Although most of my productions are English, French is my mother tongue."
    },
    "english-description": {
        "en": "I learned English as a teenager watching American TV shows. As my interests expanded into programming and I started living abroad, I naturally had both the incentive and the opportunity to improve my language abilities by reading technical litterature, watching various online content and interacting in English with others.   \nNowadays, most of my life is conducted in English.\n###### Certifications\nTOIEC Passed in 2012 with 990 points."
    },
    "japanese-description": {
        "en": "I started learning Japanese at around 16 years old, but my language ability only really took off during my studies at Meiji University, Japan, between 2012 and 2014. I studied on my own and achieved a fairly high level by the time I left Japan.  \nI have since then done my best to maintain fluency both in speaking and writting.\n###### Certifications\nJLPT N1 Passed in 2014."
    },
    "escem-description": {
        "en": "<a href=\"https://en.wikipedia.org/wiki/Grandes_%C3%A9coles\" target=\"_blank\">Grande école</a> (business school), 4th and 5th semester spent as an exchange student in Meiji University, Japan"
    },
    "escem-title": {
        "en": "Ecole Supérieure de Commerce et de Management"
    },
    "cpge-title": {
        "en": "<a href=\"https://en.wikipedia.org/wiki/Classe_pr%C3%A9paratoire_aux_grandes_%C3%A9coles\" target=\"_blank\">CPGE</a>"
    },
    "cpge-description": {
        "fr": "Voie économique",
        "en": "2 years of preparatory classes for the entrance exams to the french  <a href=\"https://en.wikipedia.org/wiki/Grandes_%C3%A9coles\" target=\"_blank\">grandes écoles</a>"
    },
    "bac-description": {
        "fr": "Voie économique et sociale",
        "en": "French high school degree"
    },
    "bac-title": {
        "en": "<a href=\"https://en.wikipedia.org/wiki/Baccalaur%C3%A9at\" target=\"_blank\">Baccalauréat</a>"
    },
    "conduit-description": {
        "en": "## <a href=\"https://sylvainleclercq.com/conduit.purs\" target=\"_blank\" >Conduit</a>\nConduit is a clone of the popular blogging website Medium, intended to showcase how a real world is implemented using various backend and frontend frameworks. This particular front-end implementation is my own and uses Purescript and Halogen.\n\nFor demonstration purposes, it has the capability of changing the back-end it connects to. By default, the public test API of the Conduit project is selected and shows whatever garbage is currently on the server. A clean database is available through <a href=\"https://github.com/de-passage/conduit-rocket.rust\" target=\"_blank\">my own Rust back-end.</a> The content of the database is reset every 24 hours. In order to use it, select **Custom backend** on the <a href=\"https://sylvainleclercq.com/conduit.purs/#/dev\" target=\"_blank\" >Developers</a> page and set the URL to `https://conduit-rocket.herokuapp.com/api/`. Feel free to <a href=\"https://sylvainleclercq.com/conduit.purs/#/register\" target=\"_blank\">register</a> and play with the app.\n\nThe code for both the front and back-end are available on <a href=\"https://github.com/de-passage/\" target=\"_blank\">my Github</a>.  \nFront-end: <a href=\"https://github.com/de-passage/conduit.purs\" target=\"_blank\">de-passage/conduit.purs</a>  \nBack-end: <a href=\"https://github.com/de-passage/conduit-rocket.rust\" target=\"_blank\">de-passage/conduit-rocket.rust</a>"
    },
    "projects": {
        "fr": "Projets",
        "ja": "プロジェクト",
        "en": "Projects"
    },
    "github-repos": {
        "fr": "Dépôts GitHub ",
        "ja": "GitHubリポジトリ",
        "en": "GitHub Repositories"
    },
    "featured": {
        "fr": "Mis en avant",
        "en": "Featured"
    },
    "nexter-description": {
        "en": "Although I was technically employed by <a href=\"https://www.akka-technologies.com/\" target=\"_blank\">AKKA technologies</a>, I only went to the office a handful of times. Most of my time was spent working at the customer's office, working on the customer's project under their management.\n\nThe project was about the development of a guidance and communication system for military armored vehicles. My responsibilities involved: \n + Design and implementation of a custom database synchronization system (C++).\n + Refactoring of a legacy code base to improve reliability and modularity (C#).\n + Implementation of business-critical features in a large application (C#).\n + Set up of unit testing frameworks and implementation of unit tests (C++ and C#).\n + Profiling and performance improvements (C#).\n + Implementation of tools to help the development and quality analysis process (C# and C++).\n + Analysis and documentation of legacy code bases (C++ and C#).\" ]\n\n###### Technical Environment:\n + **Languages:** C++, C#\n + **Tools:** JIRA, Git, WPF, NUnit, dotTrace/dotMemory, Microsoft CppUnitTestFramework"
    },
    "software-engineer": {
        "fr": "Ingénieur logiciel",
        "ja": "ソフトウェアエンジニア",
        "en": "Software Engineer"
    },
    "nexter-period": {
        "fr": "Avril 2018 - Décembre 2019",
        "ja": " ２０１８年４月－２０１９年１２月",
        "en": "April 2018 - December 2019"
    },
    "work-experience": {
        "fr": "Expérience Professionnelle",
        "ja": "職歴",
        "en": "Work Experience"
    },
    "other-work-experience": {
        "fr": "Autres expériences professionnelles",
        "ja": "その他の職歴",
        "en": "Other work experience"
    },
    "other-work-description": {
        "fr": "Entre 2011 et 2017, j'ai effectué un certain nombre d'emplois non qualifiés à travers le monde. La plupart étaient de courte durée, parfois du volontariat, et en général sans rapport avec ma situation actuelle. ",
        "en": "From 2011 to 2017 I occupied a number of unqualified positions around the world. Most of them were short term, sometimes volunteering, and in general irrelevant to my current situation."
    },
    "duration-6-months": {
        "fr": "6 mois",
        "ja": "六ヶ月",
        "en": "6 months"
    },
    "duration-４-months": {
        "fr": "4 mois",
        "ja": "四か月",
        "en": "4 months"
    },
    "duration-3-months": {
        "fr": "3 mois",
        "ja": "三ヶ月",
        "en": "3 months"
    },
    "duration-4-months": {
        "fr": "4 mois",
        "ja": "四ヶ月",
        "en": "4 months"
    },
    "duration-2-months": {
        "fr": "2 mois",
        "ja": "二ヶ月",
        "en": "2 months"
    },
    "duration-1-months": {
        "fr": "1 mois",
        "ja": "一ヶ月",
        "en": "1 month"
    },
    "duration-1-year": {
        "fr": "1 an",
        "ja": "一年間",
        "en": "1 year"
    },
    "various-australia": {
        "fr": "Différents endroits en Australie",
        "ja": "オーストラリアの数か所",
        "en": "Various places in Australia"
    },
    "victoria-australia": {
        "fr": "Victoria, Australie",
        "ja": "オーストラリア、ビクトリア州",
        "en": "Victoria, Australia"
    },
    "various-taiwan": {
        "fr": "Plusieurs endroits à Taïwan",
        "ja": "台湾の数か所",
        "en": "Several places in Taiwan"
    },
    "tokyo-japan": {
        "fr": "Tokyo, Japon",
        "ja": "日本、東京都",
        "en": "Tokyo, Japan"
    },
    "busan-korea": {
        "fr": "Busan, Corée du Sud",
        "ja": "韓国、釜山",
        "en": "Busan, South Korea"
    },
    "mlb-france": {
        "fr": "Montigny-le-Bx, France",
        "ja": "フランス",
        "en": "France"
    },
    "job-farm-hand": {
        "fr": "Employé agricole",
        "en": "Farm Hand"
    },
    "job-factory-hand": {
        "fr": "Employé en usine",
        "en": "Factory hand"
    },
    "job-hostel-employee": {
        "fr": "Employé hôtellerie",
        "en": "Hostel employee"
    },
    "job-receptionist": {
        "fr": "Réceptionniste ",
        "en": "Hotel receptionist"
    },
    "job-kitchen-hand": {
        "fr": "Employé de cuisine",
        "en": "Kitchen hand"
    },
    "job-english-conversation": {
        "fr": "Assistant de conversation en anglais",
        "ja": "英会話アシスタント",
        "en": "English conversation assistant"
    },
    "job-shop-clerk": {
        "fr": "Employé en magasin",
        "ja": "店員",
        "en": "Shop clerk"
    },
    "year": {
        "fr": "Année",
        "ja": "年",
        "en": "Year"
    },
    "duration": {
        "fr": "Durée",
        "ja": "期間",
        "en": "Duration"
    },
    "job": {
        "fr": "Emploi",
        "ja": "職業",
        "en": "Job"
    },
    "location": {
        "fr": "Lieu",
        "ja": "場所",
        "en": "Location"
    },
    "technical-skills": {
        "fr": "Compétences Techniques",
        "ja": "技術",
        "en": "Technical Skills"
    },
    "other-technical-skills": {
        "fr": "Autres Compétences Techniques ",
        "ja": "その他の技術",
        "en": "Other Technical Skills"
    },
    "programing-languages": {
        "fr": "Langages de programmation",
        "ja": "プログラミング言語",
        "en": "Programing Languages "
    },
    "other-skills-description": {
        "fr": "Une liste non-exhaustive de technologies et frameworks avec lesquels j'ai travaillé.",
        "en": "A non exhaustive list of technologies and frameworks I have worked with."
    },
    "purescript-modal": {
        "en": "I started getting interested in Purescript because of its resemblance with Haskell and its focus on front-end development. I originally went with Elm, but the limitations of that language eventually brought me to seek a language with more expressive power. \n\nIt is a very interesting language, although the compiler error output is very hard to understand, which slows down learning. My experience with the language is fairly limited but I expect to write a lot more code using it.\n\n###### Projects\n* This website is written using Purescript and Halogen.  \n  <a href=\"https://github.com/de-passage/de-passage.github.io\" target=\"_blank\">Code</a>\n* A feature-complete implementation of a <a href=\"https://realworld.io/\" target=\"_blank\">Conduit</a> front-end. Conduit is simple clone of the popular blogging plateform <a href=\"https://medium.com\" target=\"_blank\">Medium</a>. This implementation is made with Halogen.  \n<a href=\"https://github.com/de-passage/conduit.purs\" target=\"_blank\">Code</a>  \n<a href=\"https://sylvainleclercq.com/conduit.purs\" target=\"_blank\">Live</a> "
    },
    "elm-modal": {
        "en": "I started learning Elm as an alternative to Javascript for front-end development. I had already been playing with Haskell for a while, and I was sold to the idea that strongly typed languages offered a massive advantage over loosely typed ones. Elm has a very well thought out set of features and libraries, and getting started and learning the language is a pain-free experience.\n\nUnfortunately, the insistence of the language authors to limit the amount of highly abstract features (which is understandable considering the target audience) quickly got in my way. I am strongly in favor of using high levels of abstraction to develop EDSLs representing the business domain of my applications. This is simply not possible using Elm and was the motivation for trying out Purescript as an alternative.\n          \n###### Projects\nI wrote a few simple games using Elm as a way to get into the language.  \n<a href=\"/front-end-games.elm/\" target=\"_blank\">Live</a>  \n<a href=\"https://github.com/de-passage/front-end-games.elm/\" target=\"_blank\">Code</a>"
    },
    "c-modal": {
        "en": "C is an emblematic language and the first non proprietary language I learned (technically the first languageI ever programmed in was TI Basic but not for a very long time). It is also a very old language and not one I would ever use nor recommend for any real application anymore. Although it can be argued that the its feature set involve very little cost compared to raw assembly languages, there is nothing it does that cannot be done equally well in C++. It also lacks any form of support for type level programming and code generation (unless you really want to program with macros, which I wouldn't recommend). \n\nI quickly transitionned to C++ and never looked back. The language itself is simple enough that I am confident that I could pick it up and work with it again if needed.\n\nSince I haven't written any code in C in a long time, I currently do not have any project in C."
    },
    "cpp-modal": {
        "en": "C++ is the first language that I really enjoyed studying and still one of my favorite languages. I have been using it since around 2006 and like it's ability to define EDSLs and generate code through templates. It has fairly good support for type level programming and the capacity to produce both very low level, highly efficient, and very high level, very highly expressive code. However template metaprogramming is very verbose, and lately I've been prefering languages in the Haskell family for their terseness. Developping and deploying visually appealing projects in C++ can also be bothersome which fueled my interest for front-end development.\n\n###### Projects\nMost of my personal projects deal with metaprogramming. It is the subset of C++ that I find the most intellectually compelling.\n* Definition of some simple concepts of category theory in C++. The project was put on standby because I couldn't decide of the best way to represent more complicated concepts within the confine of the language.  \n<a href=\"https://github.com/de-passage/playing-with-category-theory.cpp\" target=\"_blank\" >Code</a>\n* A defunct project for code generation through combination of tags. The idea was to create classes with predefined behaviour, combine them, then customize parts of them. The <a href=\"https://gist.github.com/de-passage/0a608fe426b2fb29f50c38a7761aafc7\" target=\"_blank\">mixin system</a> that I currently use throughout my most recent projets was devised there.  \n<a href=\"https://github.com/de-passage/properties.cpp\" target=\"_blank\">Code</a>\n* Hana-style metaprograming project providing a way to create types with mathematical operators.  \n<a href=\"https://github.com/de-passage/algebraic-datatypes.cpp\" target=\"_blank\">Code</a>"
    },
    "haskell-modal": {
        "en": "I originally started Haskell because of its reputation as a difficult language, and one that pushes to rethink the way one writes software. And it is indeed difficult for anyone used to the imperative paradigms. A lot of what I learned with Haskell now pervades my style in other languages as well.\n\nI have not yet gone to the extent of writing a full program in Haskell, although I did so with some Haskell derivatives like Elm. Most of the Haskell code I wrote was as part of my learning, using <a href=\"https://codewars.com\" target=\"_blank\">codewars.com<a/> as a support.\n\n###### Projects\nI have a collection of disparate code fragments solving a variety of problems in Haskell.  \n<a href=\"https://https://github.com/de-passage/codewars-solutions\" target=\"_blank\">Code"
    },
    "lua-modal": {
        "en": "LUA is an interpreted language with good performance characteristics and a clean C API. I learned LUA shortly after C++, and integrating it in C++ applications taught me a lot about the inner workings of interpreted languages and the difference between interpretation and compilation.\n\nLUA has a fairly unique metatable concept that was also my first introduction to metaprogramming. It is unfortunately fairly verbose and dynamically typed, two characteristics that have detered me from taking on new projects using it. I would still consider it as a good choice as a scripting language in a larger project with strict performance requirements."
    },
    "javascript-modal": {
        "en": "I have a strongly negative opinion of Javascript. It is a very poorly thought-out language and wholly unsuited for commercial use. It simply has too many flaws for any serious project, and with the number of alternative languages transpiling to Javascript, I do not see any reason to keep using it.\n\nIt is still an important language to know in the front end development ecosystem and I have written enough code using it (and Coffeescript, which is just Javascript with a nicer syntax) to be comfortable with its concepts and aware of the multiple issues that plague development using JS. If given a choice, I would rather use a language with a very strong type system like Elm or Purescript, or, if under very strict performance requirements, Typescript."
    },
    "csharp-modal": {
        "en": "I had to learn C# as part of my job at Nexter Systems, as most of the project was using C# and the  .NET framework.\n\nC# is a decent language for enterprise use, as it is fairly easy to use for the average programmer, but I find it completely uninspiring. Type level programming is nigh impossible and metaprogramming involves runtime reflexion, which is essentially throwing the benefits of the type system out the window, not to mention the performance penalty. The language also imposes the use of heap allocation and nullable references for most types, which causes an endless stream of runtime crashes due to invalid references.\n\nThe best part of C# is, in my opinion, the .NET framework rather than the language itself. It is a viable option for Windows specific development in a setting with a large team of people at various skill levels, but I wouldn't use it for any personal project."
    },
    "coffeescript-modal": {
        "en": "Coffeescript is a small language transpiling to Javascript. It is very interesting in that it is \"just Javascript\" with a clean syntax. It adds a few syntactic sugar and hides some of the pitfalls of Javascript without abstracting it too much. It is usually very straightfoward to understand what the Javascript will be, by just looking at the Coffeescript code.\n\nHowever this also means that Coffeescript shares the inherent weaknesses of Javascript: lack of typing and lack of scoping. It also has fallen out of fashion with the advent of newer versions of Javascript which included much of the syntactic sugar pioneered by Coffeescript.\n\nIf I had to work with a derivative of Javascript that allows low level control over the generated code, Coffeescript is still a decent option in my opinion, but I would probably give Typescript or another typed variety of Javascript a try.\n\n###### Projects\nI have a fair number of projects using Coffeescript on my Github, but I fell that most of them aren't very interesting.  \nHere is an implementation of Conway's Game of life.  \n<a href=\"https://github.com/de-passage/game-of-life.coffee\" target=\"_blank\">Code</a>  \n<a href=\"https://codepen.io/de-passage/full/WjWExY\" target=\"_blank\">Live</a>  \n<a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\" target=\"_blank\">Wikipedia</a>"
    },
    "ruby-modal": {
        "en": "Ruby is by far my favorite scripting language. It has a very elegant syntax and allows for easy metaprogramming. Its performance characteristics are poor, but I mostly use it for lightweight, single use code. I got started with it with Ruby on Rails, although I don't have any public project using it anymore.\n\nMy main complaint against Ruby is the dynamic type system that often results in runtime errors due to type mismatches. It is well suited as a scripting language for short programs and automating tedious tasks, but I wouldn't consider it for serious production use."
    },
    "python-modal": {
        "en": "Most of my knowledge of Python actually comes from translating my experience with Ruby to this language. Python is very popular in the space of interpreted, dynamically typed languages, but I believe that it suffers from the same kind of problems as Ruby, namely poor performances and the lack of a strong type system. Even though Python performances are better than Ruby, they are nowhere near that of compiled languages.\n\nI also find its syntax less clean than that of Ruby and the strict formatting annoying.\n###### Projects \nI wrote a small website in Python using Django as a framework, but the code is not public as of now."
    },
    "html-modal": {
        "en": "HTML is not really a programming language, it's a markup language. I list it here because I don't want someone to mistakenly assume that I don't know anything about it simply because they cannot find it on the list, but there is really not much to know about it.\n\n###### Projects\nAll the front end projects I've written use HTML either directly or through some sort of preprocessing."
    },
    "css-modal": {
        "en": "CSS is a stylesheet language used to describe the presentation of a document, notably HTML. It is interesting that the inherent flaws of the language and its implementations make it a technology that needs proper training rather than a straightforward tool like HTML. Writing CSS is not something I enjoy, although development using it has been considerably eased with realtime in-browser editing and visualization.\n\nA lot of languages transpiling to CSS (SASS, LESS...) have emerged to try to mitigate the pain of CSS development, but no matter the level of abstraction, I can't help but find using CSS and its derivative tedious and boring. I usually use Bootstrap as a framework and limit my work on the visual side to the strict minimum.\n\n###### Projects\nAll my front end projects use CSS under one form or another."
    },
    "rust-modal": {
        "en": "I originally started playing with Rust as a potential competitor for C++. The promise of sensible defaults and compiler enforced lifetime management sounded appealing, but at the time, support and documentation for macros was lacking and the possibilities for EDSL development and metaprogramming felt limited.\n\nMoreover, although the reference lifetime system is a wonderful feature, it feels like a missed opportunity. As it is not extensible by any mean, there is no way that I found to encode strong invariants about the program using it. It is a limited form of dependent typing, allowing the compiler to track information that is usually known at runtime (is the reference valid or not) at compile time. It would have been interesting to be able to manage more information at compile time, such as collection sizes or value ranges.\n\nI've since revisited Rust, while working on a backend implementation of Conduit, and was pleasantly surprised by the evolution of the language. Although the speed (or rather the slowness) of compilation of expressions involving complex generics and the lack of maturity of some parts of the ecosystem were frustrating, it now feels like a language I could see myself investing time into learning in greater depths.\n\n###### Projects\nI wrote a backend implementation of Conduit, a simple clone of the blogging website Medium in Rust. I used the Rocket framework for routing, Postgresql as the database. I selected Diesel as an ORM, but I eventually dropped the idea of exploiting its DSL and fell back to hand written SQL queries, because of its severe limitations regarding subqueries, and the difficulty in getting anything moderately complicated past the type checker.  \n<a href=\"https://github.com/de-passage/conduit-rocket.rust\" target=\"_blank\">Code</a>"
    }
}